///////////////////////////////////////////////////
// note that this is the lite version
///////////////////////////////////////////////////

OUTER_SET SFO_lite=1

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Sanity check for AUTO_EVAL_STRINGS
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////

 OUTER_SPRINT var testers
 OUTER_SPRINT players var
 ACTION_IF !"%%players%%" STRING_EQUAL testers BEGIN
      FAIL "AUTO_EVAL_STRINGS is not set (you need to include it in your tp2 preamble to use SFO)"
 END



///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Set the debug variable if it isn't already set
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////

ACTION_IF !VARIABLE_IS_SET debug_variable BEGIN
   OUTER_SET debug_variable=0
END
ACTION_IF debug_variable=0 BEGIN SILENT END

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Set defaults for variables
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////

  
  OUTER_SPRINT ~component_loc~ ~~
  OUTER_SPRINT ~local_loc~ ~~


ACTION_IF !VARIABLE_IS_SET scsroot BEGIN
   OUTER_SPRINT scsroot "%TP2_BASE_NAME%"
END
ACTION_IF !VARIABLE_IS_SET workspace BEGIN
    MKDIR "weidu_external"
    MKDIR "weidu_external/workspace"
    OUTER_SPRINT workspace "weidu_external/workspace"
END

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////               
/////////////              Define some symbols
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

OUTER_SPRINT ~percentage~ ~%~
OUTER_SPRINT ~atsymbol~ ~@~
OUTER_SPRINT ~tilde~ "~"
OUTER_SPRINT ~minus_one~ "-1"
OUTER_SPRINT ~arrow~ ~=>~

<<<<<<<< .../stratagems-inline/blank
>>>>>>>>

///////////////////////////////////////////////////
// check what install we're running on
///////////////////////////////////////////////////


  OUTER_SET enhanced_edition = ( GAME_IS ~bgee bg2ee eet~ ? 1 : 0)
  OUTER_SET is_bg1 = ( GAME_IS ~bgee tutu tutu_totsc bgt eet~ ? 1 : 0)
  OUTER_SET is_bg2 = ( GAME_IS ~tutu tutu_totsc bgee~ ? 0 : 1)
  OUTER_SET is_tutu = ( GAME_IS ~tutu tutu_totsc~ ? 1 : 0)
  OUTER_SET is_eet = ( GAME_IS ~tutu tutu_totsc~ ? 1 : 0)

  ACTION_IF !VARIABLE_IS_SET tutu_var BEGIN
     ACTION_IF is_tutu BEGIN
        OUTER_SPRINT tutu_var "_"
     END ELSE BEGIN
        OUTER_SPRINT tutu_var ""
     END
  END
  
  ACTION_IF GAME_IS "eet" BEGIN
     OUTER_SPRINT eet_var "_"
  END ELSE BEGIN
     OUTER_SPRINT eet_var ""
  END

///////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////
///	Definitions from here on
///////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////


///////////////////////////////////////////////////////////////
///	Array to identify PCs' DVs
///////////////////////////////////////////////////////////////

DEFINE_ACTION_MACRO ~read_in_PCs~ BEGIN
  COPY_EXISTING - ~pdialog.2da~ ~.../scs-inline/pdialog.2da~
	COUNT_2DA_ROWS 3 ~rowcount~
	FOR (i=0;i<~%rowcount%~;i=i+1) BEGIN
		READ_2DA_ENTRY ~%i%~ 0 3 ~entry~
		TO_LOWER ~entry~
		SPRINT $script_name_pdialog( ~%entry%~) ~~
	END
  BUT_ONLY
  // add candlekeep training group names
  ACTION_FOR_EACH npc IN arkanis canderous deder mordaine osprey BEGIN
     OUTER_SPRINT $script_name_pdialog(~%npc%~) ~~
  END
  // check campaigns

  ACTION_IF FILE_EXISTS_IN_GAME campaign.2da BEGIN
     COPY_EXISTING campaign.2da "%workspace%"
      COUNT_2DA_ROWS 5 check_for_campaign
      PATCH_IF check_for_campaign>1 BEGIN
          COUNT_2DA_COLS colcount
          COUNT_2DA_ROWS colcount rowcount_campaign
          FOR (i=0;i<rowcount_campaign; i+=1) BEGIN
             LPF read_table_entry INT_VAR rownum=i STR_VAR column=PDIALOG RET file=value END
             INNER_ACTION BEGIN
                COPY_EXISTING "%file%.2da" "%workspace%"
	                COUNT_2DA_ROWS 3 ~rowcount~
	                FOR (i=0;i<~%rowcount%~;i=i+1) BEGIN
		              READ_2DA_ENTRY ~%i%~ 0 3 ~entry~
		              TO_LOWER ~entry~
		              SPRINT $script_name_pdialog( ~%entry%~) ~~
                        END
                BUT_ONLY
             END
          END
      END
     BUT_ONLY
  END
END

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////               gets the area script (and allocates one if needed)
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


DEFINE_ACTION_FUNCTION get_area_script
    STR_VAR area=""
    RET script
BEGIN
   COPY_EXISTING ~%area%.are~ ~override~
       READ_ASCII 0x94 script
       PATCH_IF (~%script%~ STRING_EQUAL_CASE ~none~ || ~%script%~ STRING_EQUAL_CASE ~~) BEGIN
          INNER_PATCH_SAVE ~script~ ~%area%~ BEGIN
             READ_ASCII 0x0 fwcheck (2)
             PATCH_IF ~%fwcheck%~ STRING_EQUAL_CASE ~FW~ BEGIN
                INSERT_BYTES 0x0 1
                WRITE_ASCII 0x0 ~_AR~
             END
          END
          WRITE_ASCII 0x94 "%script%" (8)
       END
   BUT_ONLY
   ACTION_IF !FILE_EXISTS_IN_GAME ~%script%.bcs~ BEGIN
                <<<<<<<< %script%.baf
                >>>>>>>>
                COMPILE ~%script%.baf~
   END

END

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////           take a string, strip any initial or trailing whitespace    [recursive]
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

DEFINE_PATCH_FUNCTION strip_spaces_from_string
    STR_VAR string=""
    RET string
BEGIN
    PATCH_IF !(~%string%~ STRING_EQUAL ~~) BEGIN
       PATCH_IF INDEX ("\( \|%MNL%\|%WNL%\|%LNL%\|%TAB%\)" ~%string%~)=0 BEGIN
          INNER_PATCH_SAVE ~string~ ~%string%~ BEGIN DELETE_BYTES 0 1 END
          LPF strip_spaces_from_string STR_VAR string RET string=string END
       END
       PATCH_IF !(~%string%~ STRING_EQUAL ~~)BEGIN
        PATCH_IF RINDEX ("\( \|%MNL%\|%WNL%\|%LNL%\|%TAB%\)" ~%string%~)=(STRING_LENGTH ~%string%~ -1) BEGIN
          INNER_PATCH_SAVE ~string~ ~%string%~ BEGIN DELETE_BYTES (BUFFER_LENGTH - 1) 1 END
          LPF strip_spaces_from_string STR_VAR string RET string=string END
        END
       END
    END
END

DEFINE_ACTION_FUNCTION strip_spaces_from_string
    STR_VAR string=""
    RET string
BEGIN
   OUTER_INNER_PATCH "" BEGIN
      LPF strip_spaces_from_string STR_VAR string RET string=string END
   END
END


//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////               make a textual substitution
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////



DEFINE_PATCH_FUNCTION swap_text_core
     STR_VAR arguments=""
BEGIN
     PATCH_IF ~%arguments%~ STRING_COMPARE_CASE ~~ BEGIN
        LPF return_first_pair STR_VAR list= ~%arguments%~ RET arguments=list old=key new=value END
        PATCH_IF ~%new%~ STRING_EQUAL_CASE ~NULL~ BEGIN
           SPRINT ~new~ ~~
        END
        REPLACE_TEXTUALLY CASE_INSENSITIVE ~%old%~ ~%new%~
        LPF swap_text_core STR_VAR arguments= ~%arguments%~ END
     END
END

DEFINE_PATCH_FUNCTION swap_text_core2
     STR_VAR arguments=""
BEGIN
     PATCH_IF ~%arguments%~ STRING_COMPARE_CASE ~~ BEGIN
        LPF return_first_pair STR_VAR list= ~%arguments%~ RET arguments=list old=key new=value END
        PATCH_IF ~%new%~ STRING_EQUAL_CASE ~NULL~ BEGIN
           SPRINT ~new~ ~~
        END
        SET len1=STRING_LENGTH ~%old%~
        SET len2=STRING_LENGTH ~%new%~
        SET len = len1>len2?len1:len2
        REPLACE_TEXTUALLY CASE_INSENSITIVE ~%old%~ ~%new%~ (len)
        LPF swap_text_core2 STR_VAR arguments= ~%arguments%~ END
     END
END

DEFINE_ACTION_FUNCTION swap_text
    INT_VAR tv=0
            allow_missing=0
    STR_VAR files=""
            file=""
            swaps=""
            postfix=""
BEGIN
    OUTER_SPRINT files "%files%%file%"
    OUTER_WHILE ~%files%~ STRING_COMPARE_CASE ~~ BEGIN
      LAF return_first_entry STR_VAR list= ~%files%~ RET files=list entry=entry END
      ACTION_IF tv BEGIN
            OUTER_SPRINT ~entry~ ~%tutu_var%%entry%~
      END
      ACTION_IF (~%postfix%~ STRING_COMPARE_CASE ~~) BEGIN
            OUTER_SPRINT ~entry~ ~%entry%.%postfix%~
      END
      ACTION_IF (!allow_missing || FILE_EXISTS_IN_GAME ~%entry%~) BEGIN
         OUTER_PATCH ~%entry%~ BEGIN
              SET postfix_start = INDEX_BUFFER (~\.~) +1
              SET postfix_length = BUFFER_LENGTH - postfix_start
              READ_ASCII postfix_start pf (~postfix_length~)
         END
         ACTION_TO_LOWER pf
         ACTION_MATCH "%pf%" WITH
         bcs dlg BEGIN
              COPY_EXISTING ~%entry%~ ~override~
                   DECOMPILE_AND_PATCH BEGIN
                      LPF swap_text_core STR_VAR arguments =  ~%swaps%~ END
                   END
              BUT_ONLY
         END
         2da ids BEGIN
              COPY_EXISTING ~%entry%~ ~override~
                      LPF swap_text_core STR_VAR arguments =  ~%swaps%~ END
              BUT_ONLY
         END
         DEFAULT
              COPY_EXISTING ~%entry%~ ~override~
                      LPF swap_text_core2 STR_VAR arguments =  ~%swaps%~ END
              BUT_ONLY
         END
      END
    END
END

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////            as a patch or action, take a list of variables, return the first entry, and strip it from the list
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

DEFINE_PATCH_FUNCTION return_first_entry
     STR_VAR list=""
             separator=" "
     RET list
         entry
BEGIN
     // clean out any "\n"; process separator
     INNER_PATCH_SAVE list ~%list%~ BEGIN 
             REPLACE_TEXTUALLY ~%WNL%~ ~~
             REPLACE_TEXTUALLY ~%LNL%~ ~~
             REPLACE_TEXTUALLY ~%MNL%~ ~~
             REPLACE_TEXTUALLY ~%TAB%~ ~ ~
     END
     LPF strip_spaces_from_string STR_VAR string=  ~%list%~ RET list=string END
    PATCH_IF "%list%" STRING_EQUAL_CASE "" BEGIN  // return nothing if string is empty
        SPRINT entry ""
        SPRINT list ""
    END ELSE BEGIN
     INNER_PATCH ~%list%~ BEGIN READ_ASCII 0 first_char (1) END
     PATCH_IF (~%first_char%~ STRING_EQUAL ~"~ || ~%first_char%~ STRING_EQUAL "~") BEGIN
        SPRINT ~divider~ ~%first_char%~
        INNER_PATCH_SAVE ~list~ ~%list%~ BEGIN DELETE_BYTES 0 1 END // take off the " or ~
     END ELSE BEGIN
        SPRINT ~divider~ ~%separator%~
     END
     SET end_of_first= INDEX (~%divider%~ ~%list%~)
     PATCH_IF end_of_first <0 BEGIN // this should only happen if there are no " or ~
        SPRINT entry ~%list%~
        SPRINT list ~~
     END ELSE BEGIN
       INNER_PATCH_SAVE ~list~ ~%list%~ BEGIN
           READ_ASCII 0 entry (~end_of_first~)
           DELETE_BYTES 0 (end_of_first+1)
       END
     END
     LPF strip_spaces_from_string STR_VAR string=~%list%~ RET list=string END
     LPF strip_quotes_from_string STR_VAR string=~%entry%~ RET entry=string END
     LPF strip_spaces_from_string STR_VAR string=~%entry%~ RET entry=string END
    END
END

DEFINE_ACTION_FUNCTION return_first_entry
     STR_VAR list=""
             separator=" "
     RET list
         entry
BEGIN
     OUTER_INNER_PATCH ~~ BEGIN
        LPF return_first_entry STR_VAR list separator RET list=list entry=entry END
     END
END


//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////   take a list of space-separated key => value pairs (or key->value pairs), return the first entries, and strip them from the list
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


DEFINE_PATCH_FUNCTION return_first_pair
     STR_VAR list=""
             arrow="=>"
     RET list
         key
         value

BEGIN
     INNER_PATCH_SAVE list ~%list%~ BEGIN REPLACE_TEXTUALLY ~%arrow%~ ~ %arrow% ~ END
     // we can now treat the list as an ordinary list. Return the first entry, discard the second (which should be =>), return the third
     LPF return_first_entry STR_VAR list RET list=list key=entry END
     LPF return_first_entry STR_VAR list RET list=list discard=entry END
     PATCH_IF ~%discard%~ STRING_COMPARE_CASE ~%arrow%~ BEGIN
        LPF warning STR_VAR warning= "Warning: it looks as if some entry that should be a key%arrow%value list, isn't (~list~ is currently %list%, key=%key%)" END
     END
     LPF return_first_entry STR_VAR list RET list=list value=entry END
     PATCH_IF debug_variable=2 BEGIN
        PATCH_PRINT "Returning key=%key%, value=%value%; rest of list is %list%"
     END
END

DEFINE_ACTION_FUNCTION return_first_pair
     STR_VAR list=""
     RET key
         value
         list
BEGIN
     OUTER_INNER_PATCH ~~ BEGIN
        LPF return_first_pair STR_VAR list RET list=list key=key value=value END
     END
END

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////               general warning message
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


DEFINE_PATCH_FUNCTION warning
         STR_VAR
             warning=""
             arguments=""
             repeat="no"
BEGIN
         LPF warning STR_VAR warning arguments repeat END
END

DEFINE_ACTION_FUNCTION warning
         STR_VAR
             warning=""
             arguments=""
             repeat="no"
BEGIN
        OUTER_INNER_PATCH ~~ BEGIN
           LPF warning STR_VAR warning arguments repeat END
        END
END
DEFINE_ACTION_FUNCTION warning
       STR_VAR
             warning=""
             arguments=""
             repeat="no"
BEGIN
        OUTER_INNER_PATCH ~~ BEGIN
           LPF warning STR_VAR warning arguments repeat END
        END
END

DEFINE_PATCH_FUNCTION warning
         STR_VAR
             warning=""
             arguments=""
             repeat="no"
BEGIN
     PATCH_MATCH "%warning%%arguments%" WITH
     "" null BEGIN END
     DEFAULT
        PATCH_PRINT ~%warning%%arguments%~
        LPF log_this STR_VAR file=sfo_warnings.txt input= ~%warning%%arguments%~ repeat END
     END
END

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////               get a local directory
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

DEFINE_PATCH_FUNCTION get_directory
        STR_VAR location=""
                locbase=""
                locabs=""
        RET directory
BEGIN
PATCH_IF "%locabs%" STRING_COMPARE "" BEGIN
 SPRINT directory "%locabs%"
END ELSE BEGIN
 SPRINT directory ~%scsroot%~
 PATCH_IF "%locbase%" STRING_EQUAL "" BEGIN
   PATCH_FOR_EACH loc IN component_loc local_loc location BEGIN
     PATCH_IF  ~%%loc%%~ STRING_COMPARE ~~ BEGIN
     SPRINT temp EVALUATE_BUFFER "%%loc%%"
            SPRINT ~directory~ EVALUATE_BUFFER ~%directory%/%%loc%%~
      END
   END
 END ELSE BEGIN
    PATCH_IF "%location%" STRING_EQUAL "" BEGIN
       SPRINT directory "%directory%/%locbase%"
    END ELSE BEGIN
       SPRINT directory "%directory%/%locbase%/%location%"
    END
 END
END
END

DEFINE_ACTION_FUNCTION get_directory
        STR_VAR location=""  locbase=""  locabs=""
        RET directory
BEGIN
   OUTER_INNER_PATCH ~~ BEGIN
      LPF get_directory STR_VAR location locbase locabs RET directory=directory END
   END
END

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///  generic logger
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

DEFINE_ACTION_FUNCTION log_this
        STR_VAR file=""
                input=""
                repeat="yes"
                locabs="%workspace%"
                location=""
                locbase=""
BEGIN
        ACTION_IF debug_variable=2 BEGIN
           PRINT ~trying to append %input% to %file%; location defined by locabs=%locabs% location=%location% locbase=%locbase%~
         END
        LAF get_directory STR_VAR location locabs locbase RET directory END
        ACTION_IF !FILE_EXISTS ~%directory%/%file%~ BEGIN
           COPY ~.../stratagems-inline/blank~ ~%directory%/%file%~
        END
        ACTION_IF (~%repeat%~ STRING_COMPARE_CASE ~no~) || !FILE_CONTAINS_EVALUATED ("%directory%/%file%" "%input%\($\|%WNL%\|%MNL%\|%LNL\)")BEGIN
           APPEND_OUTER ~%directory%/%file%~ ~%input%~
        END
END

DEFINE_PATCH_FUNCTION log_this
        STR_VAR file=""
                input=""
                repeat="yes"
                locabs="%workspace%"
                location=""
                locbase=""
BEGIN
        INNER_ACTION BEGIN
          LAF log_this STR_VAR file input repeat locbase locabs location END
        END
END

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////               Make a label
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

DEFINE_ACTION_FUNCTION make_label
    STR_VAR label=""
BEGIN
   COPY ~.../stratagems-inline/blank~ ~override/%label%.mrk~
   LPF log_this STR_VAR file=SFO_warnings.txt input= ~Installing label:%label%~ END
END

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////               Check a label
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

DEFINE_ACTION_FUNCTION check_label
    STR_VAR label=""
    RET value
BEGIN
   ACTION_IF FILE_EXISTS ~override/%label%.mrk~ BEGIN
      OUTER_SET value=1
   END ELSE BEGIN
      OUTER_SET value=0
   END
END

DEFINE_PATCH_FUNCTION check_label
   STR_VAR label=""
   RET value
BEGIN
   INNER_ACTION BEGIN
      LAF check_label STR_VAR label RET value END
   END
END

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////               include all the listed files with a .tpa suffix, assume each contains a function with the same name as itself, and run that function
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

DEFINE_ACTION_FUNCTION run
       STR_VAR file=""
               files=""
               location=""
               locbase=""
               locabs=""
               version=""
BEGIN
       ACTION_IF ~%file%~ STRING_EQUAL_CASE ~~ BEGIN
          ACTION_IF ~%files%~ STRING_EQUAL_CASE ~~ BEGIN
              PRINT ~Warning: you've called an include with no argument~
          END ELSE BEGIN
              OUTER_SPRINT file ~%files%~
          END
       END
       PRINT ~Including and running function(s) %file%~
       LAF get_directory STR_VAR location locbase locabs RET file_loc=directory END
       OUTER_WHILE ~%file%~ STRING_COMPARE ~~ BEGIN
           LAF return_first_entry STR_VAR list= ~%file%~ RET entry=entry file=list END
           INCLUDE ~%file_loc%/%entry%.tpa~
           LAF ~%entry%~ STR_VAR version= ~%version%~ END
       END
END

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////           take a string, strip initial or trailing ~ and "
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

DEFINE_PATCH_FUNCTION strip_quotes_from_string
    STR_VAR string=""
    RET string
BEGIN
  SET string_length=STRING_LENGTH ~%string%~
  PATCH_MATCH string_length WITH 0 BEGIN
      LPF warning STR_VAR warning="Warning: you just tried to remove quotes from an empty string. Deliberate?" END
  END
  DEFAULT
   INNER_PATCH_SAVE string ~%string%~ BEGIN
      SET lastloc=string_length - 1
      PATCH_FOR_EACH loc IN ~%lastloc%~ 0 BEGIN  // must be this way around!
         READ_ASCII 0 symbol (1)
         PATCH_IF (~%symbol%~ STRING_EQUAL ~"~ OR ~%symbol%~ STRING_EQUAL "~") BEGIN
             DELETE_BYTES loc 1
         END
      END
   END
  END
END

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////              PC detector  (assumes a PC grid already read in)
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

DEFINE_PATCH_FUNCTION CRE_is_PC
        STR_VAR filename=""
        RET value
BEGIN
        READ_ASCII DEATHVAR dv  
        TO_LOWER dv
        PATCH_IF VARIABLE_IS_SET $script_name_pdialog( ~%dv%~) BEGIN
           SET value=1
        END ELSE BEGIN
           PATCH_IF ~%filename%~ STRING_EQUAL_CASE ~charbase~ BEGIN
              SET value=1
           END ELSE BEGIN
              SET value=0
           END
        END

END

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////              read in a file as an array; use the first row as a list of variables and set each to the value in the read column.
/////////////              The column read is by default column 1 (i.e., the second column). If "read_array_column_name" is set, instead read the top row and
/////////////              use the column with that row. If "read_in_func" is set, apply it as a standard function to the value before setting it
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


DEFINE_ACTION_MACRO read_in_variables BEGIN
      LOCAL_SET startrow=0
      LOCAL_SET readcol="-1"
      LOCAL_SET colcount=0
      LOCAL_SET rowcount=0
      LOCAL_SET rownum=0
      LOCAL_SET colnum=0
      ACTION_IF !VARIABLE_IS_SET read_array_location BEGIN
         OUTER_SPRINT read_array_location ""
      END
      ACTION_IF "%read_array_is_inline%" STRING_EQUAL_CASE "yes" BEGIN
        OUTER_SPRINT read_array_location ".../stratagems-inline"
      END ELSE BEGIN
        ACTION_IF "%read_array_location%" STRING_EQUAL_CASE "" BEGIN
            LAF get_directory RET location=directory END
            OUTER_SPRINT read_array_location "%location%"
        END
      END
      ACTION_IF !VARIABLE_IS_SET read_array_column_name BEGIN
         OUTER_SPRINT read_array_column_name ""
      END
      COPY - "%read_array_location%/%array_to_read%" "%workspace%"
          COUNT_2DA_COLS colcount
          COUNT_2DA_ROWS colcount rowcount
          PATCH_IF !("%read_array_column_name%" STRING_EQUAL_CASE "") BEGIN
              SET startrow=1
              FOR (colnum=1;colnum<colcount;colnum+=1) BEGIN
                 READ_2DA_ENTRY 0 colnum colcount entry
                 PATCH_IF "%entry%" STRING_EQUAL_CASE "%read_array_column_name%" BEGIN
                    SET readcol=colnum
                 END
              END
              PATCH_IF readcol<0 BEGIN
                 PATCH_FAIL "read_in_variables macro failed to find column %read_array_column_name% in table %array_to_read%"
              END
          END ELSE BEGIN
             SET readcol=1
          END
          PATCH_IF !VARIABLE_IS_SET read_in_func BEGIN
              SPRINT read_in_func ""
          END
          FOR (rownum=startrow;rownum<rowcount;rownum+=1) BEGIN
             READ_2DA_ENTRY rownum 0 colcount var
             READ_2DA_ENTRY rownum readcol colcount val
             PATCH_IF "%read_in_func%" STRING_COMPARE "" BEGIN
                LPF "%read_in_func%" STR_VAR arguments="%val%" RET val=value END
             END
             PATCH_IF "%val%" STRING_EQUAL_CASE null BEGIN
                SPRINT val ""
             END
             SPRINT "%var%" "%val%"
          END
      BUT_ONLY
      OUTER_SPRINT read_array_location ""
      OUTER_SPRINT read_array_is_inline no
      OUTER_SPRINT read_array_column_name ""
      OUTER_SPRINT array_to_read ""
      OUTER_SPRINT read_in_func ""

END

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////               read in the NPC dialog file data
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

DEFINE_ACTION_MACRO read_in_NPC_dialogs
BEGIN
 LOCAL_SPRINT npc ""
 LOCAL_SPRINT post ""
 LOCAL_SPRINT join ""
 ACTION_IF !VARIABLE_IS_SET ~macro_read_in_dialog_data~ BEGIN
   ACTION_CLEAR_ARRAY npc_dialog_temp_array
   OUTER_SPRINT ~macro_read_in_dialog_data~ ~~
   OUTER_SPRINT $npc_dialog_temp_array("PDIALOG") ""
   ACTION_IF FILE_EXISTS_IN_GAME "campaign.2da" BEGIN
      COPY_EXISTING "campaign.2da" override
          COUNT_2DA_COLS colcount
          FOR (j=0;j<colcount - 1; j+=1) BEGIN
             READ_2DA_ENTRY 0 j (colcount - 1) colname
             PATCH_IF "%colname%" STRING_EQUAL_CASE "PDIALOG" BEGIN
                SET pdialog_row=j + 1
                SET j=colcount
             END
          END
          COUNT_2DA_ROWS colcount rowcount
          FOR (i=0;i<rowcount;i+=1) BEGIN
              READ_2DA_ENTRY i pdialog_row colcount dialog_file
              TO_UPPER dialog_file
              SPRINT $npc_dialog_temp_array("%dialog_file%") ""
          END
      BUT_ONLY
   END
   ACTION_PHP_EACH npc_dialog_temp_array AS file=>discard BEGIN
     ACTION_IF FILE_EXISTS_IN_GAME "%file%.2da" BEGIN
        COPY_EXISTING "%file%.2da" override
             COUNT_2DA_COLS colcount
             READ_2DA_ENTRIES_NOW pdialog_contents colcount
             FOR (i=0;i<pdialog_contents;i+=1) BEGIN 
                READ_2DA_ENTRY_FORMER pdialog_contents i 0 npc
                TO_UPPER npc
                SPRINT $npc_name_list(~%npc%~) ~~
                READ_2DA_ENTRY_FORMER pdialog_contents i 1 post
                READ_2DA_ENTRY_FORMER pdialog_contents i 2 join
                TO_UPPER post
                TO_UPPER join
                SPRINT ~%npc%_POSTJOIN~ ~%post%~
                SPRINT ~%npc%_JOINED~ ~%join%~
                PATCH_IF GAME_IS eet BEGIN
                       SPRINT ~%npc%_25POSTJOIN~ ~%post%~
                       SPRINT ~%npc%_25JOINED~ ~%join%~
                END ELSE BEGIN
                   PATCH_IF colcount>=6 BEGIN
                       READ_2DA_ENTRY_FORMER pdialog_contents i 4 25post
                       READ_2DA_ENTRY_FORMER pdialog_contents i 5 25join
                       TO_UPPER 25post
                       TO_UPPER 25join
                       SPRINT ~%npc%_25POSTJOIN~ ~%25post%~
                       SPRINT ~%npc%_25JOINED~ ~%25join%~
                   END
                END
             END
        BUT_ONLY


     END 
   END  // end of loop through all pdialogs

 END // end of 'do this once' loop
END // end of macro
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////               Extend a script
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

DEFINE_ACTION_FUNCTION extend
         INT_VAR tv=0
         STR_VAR file=""
                 files=""
                 script=""
                 top=""
                 bottom=""
                 location=""
                 locbase=""
                 locabs=""
                 inline="no"
                 ssl="no"
                 variables=""
BEGIN
       ACTION_IF ~%file%%files%%script%~ STRING_EQUAL_CASE ~~ BEGIN
              PRINT ~Warning: you've called an extend with no main file~
          END ELSE BEGIN
              OUTER_SPRINT file ~%file%%files%%script%~
       END
       ACTION_IF ~%ssl%~ STRING_EQUAL_CASE yes BEGIN
         ACTION_FOR_EACH script IN ~%top%~ ~%bottom%~ BEGIN
         ACTION_IF ~%script%~ STRING_COMPARE_CASE ~~ BEGIN
            LAF ssl_to_baf STR_VAR script location variables inline END
         END
        END
        OUTER_SPRINT file_loc ~%workspace%\ssl_out~
       END ELSE BEGIN
           ACTION_IF ~%inline%~ STRING_EQUAL_CASE yes BEGIN
               OUTER_SPRINT file_loc ~.../stratagems-inline~
           END ELSE BEGIN
               LAF get_directory STR_VAR location locbase locabs RET file_loc=directory END
           END
       END
       OUTER_WHILE ~%file%~ STRING_COMPARE ~~ BEGIN
           LAF return_first_entry STR_VAR list= ~%file%~ RET entry file=list END
           ACTION_IF tv BEGIN
              OUTER_SPRINT entry ~%tutu_var%%entry%~
           END
           ACTION_IF ~%top%~ STRING_COMPARE_CASE ~~ BEGIN
              EXTEND_TOP ~%entry%.bcs~ ~%file_loc%/%top%.baf~ EVALUATE_BUFFER
           END
           ACTION_IF ~%bottom%~ STRING_COMPARE_CASE ~~ BEGIN
              EXTEND_BOTTOM ~%entry%.bcs~ ~%file_loc%/%bottom%.baf~ EVALUATE_BUFFER
           END
       END


END


//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////               extends the area script
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

DEFINE_ACTION_FUNCTION extend_area_script
   STR_VAR area=""
           top=""
           bottom=""
           location=""
           inline="no"
           ssl="no"
BEGIN
   ACTION_IF ~%area%~ STRING_COMPARE ~~ BEGIN
      ACTION_IF "%top%%bottom%" STRING_EQUAL "" BEGIN
         LAF warning STR_VAR warning="extend_area_script called on area %area% with empty argument" END
      END
      LAF return_first_entry STR_VAR list= ~%area%~ RET entry=entry area=list END
      LAF get_area_script STR_VAR area= ~%entry%~ RET file=script END
      LAF extend STR_VAR file top bottom location inline ssl END
      LAF extend_area_script STR_VAR area top bottom location inline ssl END
   END
END
